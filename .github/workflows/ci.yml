name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
  release:
    types: [published]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['18.x', '20.x', '22.x']

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

      - name: Test CLI commands (integration test)
        run: |
          # Create a temporary test directory
          TEST_DIR=$(mktemp -d)
          cd $TEST_DIR

          # Make the CLI executable
          chmod +x $GITHUB_WORKSPACE/bin/promptonomicon.js

          # Test help command
          node $GITHUB_WORKSPACE/bin/promptonomicon.js --help

          # Test doctor command (should fail since we're not initialized)
          node $GITHUB_WORKSPACE/bin/promptonomicon.js doctor || true

          # Test init command
          node $GITHUB_WORKSPACE/bin/promptonomicon.js init -y

          # Test doctor command again (should pass)
          node $GITHUB_WORKSPACE/bin/promptonomicon.js doctor

          # Test reset command
          node $GITHUB_WORKSPACE/bin/promptonomicon.js reset --yes

          # Test with MCP servers
          node $GITHUB_WORKSPACE/bin/promptonomicon.js init -y --force --with-mcp-servers=versionator

          # Verify MCP configuration
          test -f .mcp.json && echo "✓ MCP configuration created"
          test -f CLAUDE.md && echo "✓ Claude instructions created"

          # Clean up
          cd $GITHUB_WORKSPACE
          rm -rf $TEST_DIR

  publish:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Update package version
        run: |
          # Extract version from tag (assumes tags like v1.0.0)
          VERSION=${GITHUB_REF#refs/tags/v}
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          if [ "$VERSION" != "$CURRENT_VERSION" ]; then
            npm version $VERSION --no-git-tag-version
          else
            echo "Version already set to $VERSION"
          fi

      - name: Publish to npm
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPMJS_ACCESS_TOKEN }}

      - name: Create GitHub Release Assets
        run: |
          # Create a tarball of the package
          npm pack

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            promptonomicon-*.tgz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
